220220

モジュール化した test_split_novel の関数群を getPagesJs.js に配置、
Pages コンポーネントから読み込ませてみたが、
戻り値が Promise となっていて受け取れなかった。

しかたないので Pages コンポーネントに移植してみたが、
今度は clientHeight 効かない問題が発覚。
テストページで useRef() を使ったところ、解決。

useRef() で要素のスケールは取得できたが、
実際にスケールテストで行を追加した後に hogeRef.current.client に
アクセスするとエラーになる。

値が変化しても再読み込みが行われない？　という仕様らしいので、
変化後のサイズを検出するのは不可能かもしれない。

Scale.js で悪戦苦闘中。
Page インスタンス、最初で改ページが行われずに
すべての行が最初の Page.lines に格納されてしまっている。

たぶんスケール周りの計測が正確にできていないと思われる。

行が追加されるごとに divHeight をチェックしてみたが、
値が変化していなかった。

つまり、React において実測してのページ分割は実質不可能。
数値計算で実現するしかない。

ルールを決めよう。ルビはなろうと同じで漢字10文字、
フリガナは 20 文字を上限とする。



$#########$#########$#########$#########$#########
220221

ルビのエンコードで、ダブルコートで囲うと
タグがそのまま表示されてしまう。

かといってダブルコードを取っ払うと
[object Object]という謎の表示になる。

モジュール encoder.js に JSX 出力用の
ruby エンコード関数を用意したらルビを正確に表示できた。

以下はルビの変換に失敗したコード。
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
const rubyConverted = escaped.replace(
    /｜([^《]+)《([^》]+)》/g,
    "<ruby><rb>$1</rb><rp>(</rp><rt>$2</rt><rp>)</rp></ruby>"
);
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

replace() で正規表現を使って変換すると、ただの文字列として表示されてしまう。
また、置き換え後のタグのダブルコートを排除すると、
[object Object] と表示されてしまう。

元の文章からルビタグを match 関数で抽出して、
array.push(<ruby><rb>{ ruby[1] }</rb><rp>(</rp><rt>{ ruby[2] }</rt><rp>)</rp></ruby>);
などと、ひとつのルビタグを配列の1要素として返し、
array.join() で結合したらうまく表示された。

ただし、モジュール内の encodeJsxRuby() の時点で join() すると
なぜか [object Object] となってしまう。
あくまでモジュールは配列を返し、最後に結合しないとだめっぽい。

このことから、Page オブジェクトには Ruby エンコードしていない
原文のままの行を配列として格納し、最後に表示する直前で
モジュールの encodeJsxRuby() でエンコードするといいかも。