import React, {useEffect, useMemo, useRef, useState} from "react";
import {getNovels} from "../novels/novelController";
import {encodeRuby} from "../modules/encoder";
import {Page} from "../modules/Page";

export const Scale4Js = (props) => {
    const novelId = 1;
    const epId = 1;
    const [text, setText] = useState([""]);
    const [pageObjs, setPageObjs] = useState([]);
    const [scaleP, setScaleP] = useState([<ruby><rb>試験</rb><rp>（</rp><rt>テスト</rt><rp>）</rp></ruby>]);
    const [scaleP2, setScaleP2] = useState("");
    const [pHeight, SetPHeight] = useState(0);
    const [divHeight, SetDivHeight] = useState(0);
    const [divHeight2, SetDivHeight2] = useState(0);
    const [maxWidth, SetMaxWidth] = useState(null);
    const [maxHeight, SetMaxHeight] = useState(null);
    const [rubyLineHeight, SetRubyLineHeight] = useState(null);
    const fontSize = 20; // px
    const maxChars = Math.floor(maxWidth / fontSize);
    const divRef = useRef(null);
    const divRef2 = useRef(null);
    const pRef = useRef(null);
    useEffect(() => {
        SetPHeight(pRef.current.clientHeight);
        SetDivHeight(divRef.current.clientHeight);
        SetDivHeight2(divRef2.current.clientHeight);
        SetMaxWidth(divRef.current.clientWidth);
        SetMaxHeight(divRef.current.clientHeight);
        SetRubyLineHeight(pRef.current.clientHeight);
        console.log(text);
    });
    useMemo(() => {
        setText(getNovels(novelId, epId));
    }, [novelId, epId]);

    const getIndexOfLineBreak = (encodedLine, remainLines) => {
        const maxHeight = rubyLineHeight * remainLines;
        console.log("maxHeight: " + maxHeight);
        let str = encodedLine;
        let num = 0;
        while(true){
            if(str.substr(num, 6) === "<ruby>") {
                // ルビタグの抽出
                const ruby = str.match(/<ruby><rb>([^\x01-\x7E]+)<\/rb><rp>\(<\/rp><rt>([^\x01-\x7E]+)<\/rt><rp>\)<\/rp><\/ruby>/);
                setScaleP2(scaleP2 + ruby);
                if(divRef2.current.clientHeight > maxHeight){
                    console.log("divRef2.current.innerHTML");
                    console.log(divRef2.current.innerHTML);
                    return Math.floor(num);
                } else {
                    num += ruby[0].length; // 本来一文字先に進むところを、ルビならルビタグ全体分進める
                }
                str = str.replace("<ruby>", "<xxxx>"); // 現在のルビタグの無効化
            } else {
                setScaleP2(scaleP2 + str.substr(num, 1));
                if(divRef2.current.clientHeight > maxHeight){
                    console.log("divRef2.current.innerHTML");
                    console.log(divRef2.current.innerHTML);
                    return Math.floor(num);
                } else {
                    num++;
                }
            }
            if(num > 5000){
                console.log("endless loop occurred")
                return -1; // 無限ループエラー対策
            }
        }
    }

    // 禁則処理によって排除される文字数を算出
    const getNumOfDeletedCharsByKinsokuOneLine = (line) => {
        const char = line.substr(maxChars - 1, 1);
        const next = line.substr(maxChars, 1);
        if(char.search(/[「『（《〈【〚［〔｛]/) > -1){
            return 1;
        } else if(char === "―") {
            if(line.substr(maxChars, 1) === "―"){
                return 1;
            }
        } else if(char === "…") {
            if(line.substr(maxChars, 1) === "…"){
                return 1;
            } else if(line.substr(maxChars - 1, 1) === "…"){
                return 2;
            }
        } else if(next.search(/[、。」』）》〉】〛］〕｝]/) > -1){
            return 1;
        }
        return 0;
    }

    const getNumOfDeletedCharsBykinsoku = (line) => {
        let sum = 0;
        let remains = line;
        let i = 0;
        while(remains.length > 0){
            const num = getNumOfDeletedCharsByKinsokuOneLine(remains);
            remains = remains.substr(maxChars - num);
            sum += num;

            // 無限ループ対策
            if(i > 1000){
                alert("endless loop occurred");
            }
        }
        console.log("sum: " + sum);
        return sum;
    }

    const separateFinalLine = (line, remainLines) => {
        const hasRuby = line.indexOf("｜");
        const max = maxChars * remainLines;
        console.log("max: " + max);
        if(hasRuby > -1 && hasRuby < max){
            const encoded = encodeRuby(line);
            // ルビが１行内にあるなら、新しい改行ポイント indexOf を取得
            const lineBreak = getIndexOfLineBreak(encoded, remainLines);
            console.log("lineBreak: " + lineBreak);
            // １行で収まりきらない場合は分割
            if(encoded.length > lineBreak){
                return [encoded.substr(0, lineBreak), encoded.substr(lineBreak)];
            }
        } else {
            if(line.length > max){
                const kinsoku = getNumOfDeletedCharsBykinsoku(line);
                const line1 = line.substr(0, max - kinsoku);
                const line2 = line.substr(max - kinsoku);
                return [encodeRuby(line1), encodeRuby(line2)];
            }
        }
        return [this.encodeRuby(line), null];
    }

    // 最終行が複数行の場合、一度テスト用のPタグに入れて実測
    const getTruePHeight = (line) => {
        setScaleP(line);
        return pRef.current.clientHeight;
    }

    // 実測した最終行が空きスペースより1行以上少ない場合、追加分を再取得
    const getAdditionalStr = (remainHeight, array) => {
        const trueHeight = getTruePHeight(array[0]);
        const remainLines = remainHeight - trueHeight;
        if(remainLines > rubyLineHeight
            && array[1].length > 0)
        {
            // 実測した最終行が空きスペースより1行以上少ない場合、追加分を再取得
            return separateFinalLine(
                array[1],
                Math.floor(remainLines / rubyLineHeight)
            );
        } else {
            return ["", array[1]];
        }
    }

    const createPage = (i, remainText) => new Promise((resolve, reject) => {
        let page = new Page(i);
        // let lines = encodeRuby(remainText).split("\n");
        let lines = remainText;
        let finalLine = 0;
        for(let j = 0; j < lines.length; j++){
            if(divRef.current.clientHeight < maxHeight){
                const key = "line-" + i + "_" + j;
                const p = <p key={key} id={key}>{ lines[j] }</p>;
                setScaleP(scaleP.push(p));
                page.lines.push(lines[j]);
            } else {
                if(finalLine === 0){
                    finalLine = j - 1;
                }
            }
        }

        if(finalLine > 0){
            setScaleP(scaleP.pop());
            page.lines.pop();
            const remainHeight = maxHeight - divRef.current.clientHeight;
            let newLines = lines.slice(finalLine + 1);
            if(remainHeight >= rubyLineHeight){
                const array = separateFinalLine(
                    newLines[finalLine],
                    Math.floor(remainHeight / rubyLineHeight)
                );
                const additionalArray = getAdditionalStr(remainHeight, array);
                page.lines.push(array[0] + additionalArray[0]);
                if(additionalArray[1] !== null){
                    newLines.unshift(additionalArray[1]);
                }
            }
            setPageObjs(pageObjs.push(page));
            resolve(newLines);
        } else {
            setPageObjs(pageObjs.push(page));
            resolve("");
        }
    });

    let i = 0;
    let remains = "";
    const getPages = async(str) => {
        remains = await createPage(i, str);

        if(remains.length > 0){
            i++;
            getPages(remains);
        } else {
            console.log("pageObjs");
            console.log(pageObjs);
        }
    }

    useMemo(() => {
        console.log("lines:");
        console.log(text);
        return getPages(text);
    }, [text]);

    return (
        <>
            <div id={"scale"} ref={ divRef }>
                <p id={"scale_p"} ref={ pRef }>
                    { scaleP }
                </p>
            </div>
            <div id={"scale2"} ref={ divRef2 } style={{ display: "inline-block" }}>
                { scaleP2 }
            </div>
        </>
    );
}